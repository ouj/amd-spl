#ifndef _AMDSPL_BITONICSORT_CALCODE_H
#define _AMDSPL_BITONICSORT_CALCODE_H

#include "ILProgInfo.h"

const char BitonicSortSource[] = 
"il_ps_2_0\n"
"dcl_literal l0, 0x00000000, 0x00000000, 0x00000000, 0x00000000\n"
"dcl_literal l1, 0x00000001, 0x00000001, 0x00000001, 0x00000001\n"
"dcl_literal l2, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF\n"
"dcl_literal l3, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF\n"
"dcl_literal l4, 0x7F800000, 0x7F800000, 0x7F800000, 0x7F800000\n"
"dcl_literal l5, 0x80000000, 0x80000000, 0x80000000, 0x80000000\n"
"dcl_literal l6, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B\n"
"dcl_literal l7, 0x3F317218, 0x3F317218, 0x3F317218, 0x3F317218\n"
"dcl_literal l8, 0x40490FDB, 0x40490FDB, 0x40490FDB, 0x40490FDB\n"
"dcl_literal l9, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB\n"
"dcl_literal l10, 0x00000003, 0x00000003, 0x00000003, 0x00000003\n"
"dcl_literal l11, 0x00000002, 0x00000002, 0x00000002, 0x00000002\n"
"dcl_literal l12, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000\n"
"dcl_literal l13, 0x40000000, 0x40000000, 0x40000000, 0x40000000\n"
"dcl_output_generic o0\n"
"dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)\n"
"dcl_input_position_interp(linear_noperspective) v0.xy__\n"
"dcl_literal l14, 0x3F000000, 0x3F000000, 0x3F000000, 0x3F000000\n"
"dcl_cb cb0[3]\n"
"mov r315.xy__, v0\n"
"mov r269.x___, cb0[l0.x+0].x000\n"
"mov r270.xyz_, cb0[l0.x+0].yzw0\n"
"mov r271.x___, cb0[l0.x+1].x000\n"
"mov r272.xyz_, cb0[l0.x+1].yzw0\n"
"mov r273.x___, cb0[l0.x+2].x000\n"
"mov r274.xyz_, cb0[l0.x+2].yzw0\n"
"call 38\n"
"call 0\n"
"endmain\n"
"func 0\n"
"mov o0, r314\n"
"ret\n"
"func 2\n"
"ieq r0.x___, r17.x000, l0.x000\n"
"if_logicalnz r0.x000\n"
"sample_resource(0)_sampler(0) r19, r18.xy00\n"
"endif\n"
"mov r16.x___, r19.x000\n"
"ret_dyn\n"
"ret\n"
"func 37\n"
"itof r323.x___, r280.x000\n"
"mov r287.x___, r323.x000\n"
"mov r286.x___, r287.x000\n"
"mod r288.x___, r286.x000, r279.x000\n"
"lt r289.x___, r288.x000, r278.x000\n"
"mov r290.x___, l12.x000_neg(xyzw)\n"
"and r324.x___, r289.x000, l1.x000\n"
"itof r324.x___, r324.x000\n"
"cmov_logical r291.x___, r324.x000, l12.x000, r290.x000\n"
"mov r283.x___, r291.x000\n"
"div_zeroop(infinity) r292.x___, r286.x000, r277.x000\n"
"round_neginf r293.x___, r292.x000\n"
"mod r294.x___, r293.x000, l13.x000\n"
"eq r295.x___, r294.x000, l0.x000\n"
"mov r296.x___, l12.x000_neg(xyzw)\n"
"and r325.x___, r295.x000, l1.x000\n"
"itof r325.x___, r325.x000\n"
"cmov_logical r297.x___, r325.x000, l12.x000, r296.x000\n"
"mov r282.x___, r297.x000\n"
"mul_ieee r298.x___, r283.x000, r278.x000\n"
"add r299.x___, r286.x000, r298.x000\n"
"mov r281.x___, r299.x000\n"
"mov r300.x___, r286.x000\n"
"mov r300._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r300.xy00\n"
"call 2\n"
"mov r326.x___, r16.x000\n"
"mov r301.x___, r281.x000\n"
"mov r301._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r301.xy00\n"
"call 2\n"
"mov r327.x___, r16.x000\n"
"lt r302.x___, r326.x000, r327.x000\n"
"mov r303.x___, r286.x000\n"
"mov r303._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r303.xy00\n"
"call 2\n"
"mov r328.x___, r16.x000\n"
"mov r304.x___, r281.x000\n"
"mov r304._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r304.xy00\n"
"call 2\n"
"mov r329.x___, r16.x000\n"
"and r330.x___, r302.x000, l1.x000\n"
"itof r330.x___, r330.x000\n"
"cmov_logical r305.x___, r330.x000, r328.x000, r329.x000\n"
"mov r285.x___, r305.x000\n"
"mov r306.x___, r286.x000\n"
"mov r306._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r306.xy00\n"
"call 2\n"
"mov r331.x___, r16.x000\n"
"mov r307.x___, r281.x000\n"
"mov r307._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r307.xy00\n"
"call 2\n"
"mov r332.x___, r16.x000\n"
"lt r308.x___, r332.x000, r331.x000\n"
"mov r309.x___, r286.x000\n"
"mov r309._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r309.xy00\n"
"call 2\n"
"mov r333.x___, r16.x000\n"
"mov r310.x___, r281.x000\n"
"mov r310._y__, l0.0x00\n"
"mov r17.x___, r275.x000\n"
"mov r18.xy__, r310.xy00\n"
"call 2\n"
"mov r334.x___, r16.x000\n"
"and r335.x___, r308.x000, l1.x000\n"
"itof r335.x___, r335.x000\n"
"cmov_logical r311.x___, r335.x000, r333.x000, r334.x000\n"
"mov r284.x___, r311.x000\n"
"eq r312.x___, r283.x000, r282.x000\n"
"and r336.x___, r312.x000, l1.x000\n"
"itof r336.x___, r336.x000\n"
"cmov_logical r313.x___, r336.x000, r285.x000, r284.x000\n"
"mov r276.x___, r313.x000\n"
"ret\n"
"func 38\n"
"mov r319.x___, l14.x000\n"
"mov r319._y__, l14.0x00\n"
"sub r320.xy__, r315.xy00, r319.xy00\n"
"mov r337, r320.xy00\n"
"mov r318, r337\n"
"mov r275.x___, l0.x000\n"
"mov r277.x___, r269.x000\n"
"mov r278.x___, r271.x000\n"
"mov r279.x___, r273.x000\n"
"ftoi r338, r318\n"
"mov r280, r338\n"
"call 37\n"
"mov r317.x___, r276.x000\n"
"mov r321.x___, r317.x000\n"
"mov r321._y__, l0.0x00\n"
"mov r321.__z_, l0.00x0\n"
"mov r321.___w, l0.000x\n"
"mov r316, r321\n"
"mov r314, r316\n"
"ret_dyn\n"
"ret\n"
"end\n";


const char BitonicSortATSource[] = 
"il_ps_2_0\n"
"dcl_output_generic o0\n"
"dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)\n"
"dcl_input_position_interp(linear_noperspective) v0.xy__\n"
"dcl_cb cb0[7]\n"
"mov o0, v0\n"
"endmain\n"
"end\n";


#endif // _AMDSPL_SORT_CALCODE_H
