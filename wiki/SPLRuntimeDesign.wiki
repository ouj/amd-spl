#summary the SPL runtime design and behaviour

= Introduction =
The CAL runtime provide GPGPU service to the entire SPL. It is a wrapper of the underlying CAL function call.

= Runtime initialization =
CAL runtime uses the singleton design parttern. A Runtime object is allocated when `AmdSpl::Initailized()` is called, then its `Runtime::create()` method is called. In the `Runtime::create()` method, the following things are done:

== CAL initialization ==
the `Runtime::create()` method will call `calInit()` to initialize the CAL. If `calInit()` returns `CAL_RESULT_OK`, that means CAL is initialized successfully, and the SPL is responsible for its shutdown at exit. If `calInit()` returns `CAL_RESULT_ALREADY`, that means CAL is already initialized somewhere else in the same program. Then the SPL will not call calShutdown at exit.

== Create manager classes ==
A set of manager classes, including [DeviceManager], [BufferManager], [ProgramManager] and [ConstBufferPool] is created and initialized in `Runtime::create()`