#ifndef _AMDSPL_BITONICSORT_CALCODE_H
#define _AMDSPL_BITONICSORT_CALCODE_H

#include "ILParaInfo.h"
#include "ILParaList.h"

namespace amdspl
{
        enum SORT_ILPROGRAMS_INDEX
        {
            BITONIC_SORT_IL = 0,
            BITONIC_SORT_AT_IL,
            ILPRGROGRAMS_NUM
        };

        typedef AppendILPara<ILParaEnd,     ILParaInfo<1, 1, 7>>::Result    T1; // BITONIC_SORT_AT_IL
        typedef AppendILPara<T1,            ILParaInfo<1, 1, 3>>::Result    T2; // BITONIC_SORT_IL
        typedef T2                                                          SORT_ILPARA_LIST;

        const char* ILParaAt<SORT_ILPARA_LIST, BITONIC_SORT_IL>::Result::Image = 
            "il_ps_2_0\n"
            "dcl_output_generic o0\n"
            "dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)\n"
            "dcl_input_position_interp(linear_noperspective) v0.xy__\n"
            "dcl_literal l0, 0x3F000000, 0x40000000, 0x00000000, 0x3F800000\n"
            "dcl_cb cb0[3]\n"
            "mov r1.xy__, v0\n"
            "sample_resource(0)_sampler(0) r11, r1.xy00\n"
            "ftoi r1, r1\n"
            "itof r1.x___, r1.x000\n"
            "mod r3.x___, r1.x000, cb0[2].x000\n"
            "lt r3.x___, r3.x000, cb0[1].x000\n"
            "cmov_logical r3.x___, r3.x000, l0.w000, l0.w000_neg(xyzw)\n"
            "div_zeroop(infinity) r4.x___, r1.x000, cb0[0].x000\n"
            "round_neginf r4.x___, r4.x000\n"
            "mod r4.x___, r4.x000, l0.y000\n"
            "eq r4.x___, r4.x000, l0.z000\n"
            "cmov_logical r4.x___, r4.x000, l0.w000, l0.w000_neg(xyzw)\n"
            "mul_ieee r2.x___, r3.x000, cb0[1].x000\n"
            "add r2.x___, r2.x000, r1.x000\n"
            "sample_resource(0)_sampler(0) r22, r2.xy00\n"
            "lt r100, r11, r22\n"
            "cmov_logical r5, r100, r11, r22\n"
            "cmov_logical r6, r100, r22, r11\n"
            "eq r44, r3.x000, r4.x000\n"
            "cmov_logical o0, r44, r5, r6\n"
            "endmain\n"
            "end\n";

        const char* ILParaAt<SORT_ILPARA_LIST, BITONIC_SORT_AT_IL>::Result::Image = 
            "il_ps_2_0\n"
            "dcl_literal l0, 0x00000000, 0x00000000, 0x00000000, 0x00000000\n"
            "dcl_literal l1, 0x00000001, 0x00000001, 0x00000001, 0x00000001\n"
            "dcl_literal l2, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF\n"
            "dcl_literal l3, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF\n"
            "dcl_literal l4, 0x7F800000, 0x7F800000, 0x7F800000, 0x7F800000\n"
            "dcl_literal l5, 0x80000000, 0x80000000, 0x80000000, 0x80000000\n"
            "dcl_literal l6, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B\n"
            "dcl_literal l7, 0x3F317218, 0x3F317218, 0x3F317218, 0x3F317218\n"
            "dcl_literal l8, 0x40490FDB, 0x40490FDB, 0x40490FDB, 0x40490FDB\n"
            "dcl_literal l9, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB\n"
            "dcl_literal l10, 0x00000003, 0x00000003, 0x00000003, 0x00000003\n"
            "dcl_literal l11, 0x00000002, 0x00000002, 0x00000002, 0x00000002\n"
            "dcl_literal l12, 0x3F000000, 0x3F000000, 0x3F000000, 0x3F000000\n"
            "dcl_literal l13, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000\n"
            "dcl_literal l14, 0x40000000, 0x40000000, 0x40000000, 0x40000000\n"
            "dcl_output_generic o0\n"
            "dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)\n"
            "dcl_input_position_interp(linear_noperspective) v0.xy__\n"
            "dcl_cb cb0[7]\n"
            "mov r369.xy__, v0\n"
            "mov r325, cb0[l0.x+0]\n"
            "mov r326, cb0[l0.x+1]\n"
            "mov r327.x___, cb0[l0.x+2].x000\n"
            "mov r328.xyz_, cb0[l0.x+2].yzw0\n"
            "mov r329.x___, cb0[l0.x+3].x000\n"
            "mov r330.xyz_, cb0[l0.x+3].yzw0\n"
            "mov r331.x___, cb0[l0.x+4].x000\n"
            "mov r332.xyz_, cb0[l0.x+4].yzw0\n"
            "mov r333, cb0[l0.x+5]\n"
            "mov r334, cb0[l0.x+6]\n"
            "call 41\n"
            "call 0\n"
            "endmain\n"
            "func 0\n"
            "mov o0, r368\n"
            "ret\n"
            "func 2\n"
            "ieq r0.x___, r17.x000, l0.x000\n"
            "if_logicalnz r0.x000\n"
            "sample_resource(0)_sampler(0) r19, r18.xy00\n"
            "endif\n"
            "mov r16.x___, r19.x000\n"
            "ret_dyn\n"
            "ret\n"
            "func 37\n"
            "mov r277.x___, l0.x000\n"
            "mov r277._y__, l0.0x00\n"
            "mov r277.__z_, l0.00x0\n"
            "mov r277.___w, l0.000x\n"
            "mov r273, r277\n"
            "ftoi r376.xy__, r270.xy00\n"
            "mov r278.xy__, r376.xy00\n"
            "mov r274.xy__, r278.xy00\n"
            "mov r377.x___, r274.y000\n"
            "imul r279.x___, r377.x000, r272.x000\n"
            "iadd r280.x___, r279.x000, r274.x000\n"
            "mov r275.x___, r280.x000\n"
            "mov r380.x___, r275.x000\n"
            "imax r378.x___, r275.x000, r380.x000_neg(xyzw)\n"
            "mov r381.x___, r271.x000\n"
            "imax r379.x___, r271.x000, r381.x000_neg(xyzw)\n"
            "udiv r382.x___, r378.x000, r379.x000\n"
            "inegate r383.x___, r382.x000\n"
            "ixor r384.x___, r275.x000, r271.x000\n"
            "and r384.x___, r384.x000, l5.x000\n"
            "cmov_logical r281.x___, r384.x000, r383.x000, r382.x000\n"
            "mov r276.x___, r281.x000\n"
            "imul r282.x___, r276.x000, r271.x000\n"
            "iadd r283.x___, r275.x000, r282.x000_neg(xyzw)\n"
            "mov r273.x___, r283.x000\n"
            "mov r385.x___, r271.y000\n"
            "mov r388.x___, r276.x000\n"
            "imax r386.x___, r276.x000, r388.x000_neg(xyzw)\n"
            "mov r389.x___, r385.x000\n"
            "imax r387.x___, r385.x000, r389.x000_neg(xyzw)\n"
            "udiv r390.x___, r386.x000, r387.x000\n"
            "inegate r391.x___, r390.x000\n"
            "ixor r392.x___, r276.x000, r385.x000\n"
            "and r392.x___, r392.x000, l5.x000\n"
            "cmov_logical r284.x___, r392.x000, r391.x000, r390.x000\n"
            "mov r273.__z_, r284.00x0\n"
            "mov r393.x___, r273.z000\n"
            "mov r394.x___, r271.y000\n"
            "imul r285.x___, r393.x000, r394.x000\n"
            "iadd r286.x___, r276.x000, r285.x000_neg(xyzw)\n"
            "mov r273._y__, r286.0x00\n"
            "mov r269, r273\n"
            "ret_dyn\n"
            "ret\n"
            "func 38\n"
            "mov r295.x___, l0.x000\n"
            "mov r295._y__, l0.0x00\n"
            "mov r292.xy__, r295.xy00\n"
            "mov r293.x___, l0.x000\n"
            "mov r294.x___, l0.x000\n"
            "mov r294.x___, r289.x000\n"
            "mov r397.x___, r294.x000\n"
            "imax r395.x___, r294.x000, r397.x000_neg(xyzw)\n"
            "mov r398.x___, r291.x000\n"
            "imax r396.x___, r291.x000, r398.x000_neg(xyzw)\n"
            "udiv r399.x___, r395.x000, r396.x000\n"
            "inegate r400.x___, r399.x000\n"
            "ixor r401.x___, r294.x000, r291.x000\n"
            "and r401.x___, r401.x000, l5.x000\n"
            "cmov_logical r296.x___, r401.x000, r400.x000, r399.x000\n"
            "mov r293.x___, r296.x000\n"
            "imul r297.x___, r293.x000, r291.x000\n"
            "iadd r298.x___, r294.x000, r297.x000_neg(xyzw)\n"
            "itof r402.x___, r298.x000\n"
            "mov r299.x___, r402.x000\n"
            "add r300.x___, r299.x000, l12.x000\n"
            "mov r292.x___, r300.x000\n"
            "itof r403.x___, r293.x000\n"
            "mov r301.x___, r403.x000\n"
            "add r302.x___, r301.x000, l12.x000\n"
            "mov r292._y__, r302.0x00\n"
            "mov r288.xy__, r292.xy00\n"
            "ret_dyn\n"
            "ret\n"
            "func 40\n"
            "itof r404.x___, r340.x000\n"
            "mov r349.x___, r404.x000\n"
            "mov r348.x___, r349.x000\n"
            "mod r350.x___, r348.x000, r339.x000\n"
            "lt r351.x___, r350.x000, r338.x000\n"
            "mov r352.x___, l13.x000_neg(xyzw)\n"
            "and r405.x___, r351.x000, l1.x000\n"
            "itof r405.x___, r405.x000\n"
            "cmov_logical r353.x___, r405.x000, l13.x000, r352.x000\n"
            "mov r345.x___, r353.x000\n"
            "div_zeroop(infinity) r354.x___, r348.x000, r337.x000\n"
            "round_neginf r355.x___, r354.x000\n"
            "mod r356.x___, r355.x000, l14.x000\n"
            "eq r357.x___, r356.x000, l0.x000\n"
            "mov r358.x___, l13.x000_neg(xyzw)\n"
            "and r406.x___, r357.x000, l1.x000\n"
            "itof r406.x___, r406.x000\n"
            "cmov_logical r359.x___, r406.x000, l13.x000, r358.x000\n"
            "mov r344.x___, r359.x000\n"
            "mul_ieee r360.x___, r345.x000, r338.x000\n"
            "add r361.x___, r348.x000, r360.x000\n"
            "mov r343.x___, r361.x000\n"
            "mov r407, r348.x\n"
            "ftoi r408, r407\n"
            "mov r289, r408\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r409.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r409.xy00\n"
            "call 2\n"
            "mov r410.x___, r16.x000\n"
            "mov r411, r343.x\n"
            "ftoi r412, r411\n"
            "mov r289, r412\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r413.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r413.xy00\n"
            "call 2\n"
            "mov r414.x___, r16.x000\n"
            "lt r362.x___, r410.x000, r414.x000\n"
            "mov r415, r348.x\n"
            "ftoi r416, r415\n"
            "mov r289, r416\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r417.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r417.xy00\n"
            "call 2\n"
            "mov r418.x___, r16.x000\n"
            "mov r419, r343.x\n"
            "ftoi r420, r419\n"
            "mov r289, r420\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r421.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r421.xy00\n"
            "call 2\n"
            "mov r422.x___, r16.x000\n"
            "and r423.x___, r362.x000, l1.x000\n"
            "itof r423.x___, r423.x000\n"
            "cmov_logical r363.x___, r423.x000, r418.x000, r422.x000\n"
            "mov r347.x___, r363.x000\n"
            "mov r424, r348.x\n"
            "ftoi r425, r424\n"
            "mov r289, r425\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r426.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r426.xy00\n"
            "call 2\n"
            "mov r427.x___, r16.x000\n"
            "mov r428, r343.x\n"
            "ftoi r429, r428\n"
            "mov r289, r429\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r430.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r430.xy00\n"
            "call 2\n"
            "mov r431.x___, r16.x000\n"
            "lt r364.x___, r431.x000, r427.x000\n"
            "mov r432, r348.x\n"
            "ftoi r433, r432\n"
            "mov r289, r433\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r434.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r434.xy00\n"
            "call 2\n"
            "mov r435.x___, r16.x000\n"
            "mov r436, r343.x\n"
            "ftoi r437, r436\n"
            "mov r289, r437\n"
            "mov r290, r341\n"
            "mov r291, r342\n"
            "call 38\n"
            "mov r438.xy__, r288.xy00\n"
            "mov r17.x___, r335.x000\n"
            "mov r18.xy__, r438.xy00\n"
            "call 2\n"
            "mov r439.x___, r16.x000\n"
            "and r440.x___, r364.x000, l1.x000\n"
            "itof r440.x___, r440.x000\n"
            "cmov_logical r365.x___, r440.x000, r435.x000, r439.x000\n"
            "mov r346.x___, r365.x000\n"
            "eq r366.x___, r345.x000, r344.x000\n"
            "and r441.x___, r366.x000, l1.x000\n"
            "itof r441.x___, r441.x000\n"
            "cmov_logical r367.x___, r441.x000, r347.x000, r346.x000\n"
            "mov r336.x___, r367.x000\n"
            "ret\n"
            "func 41\n"
            "mov r270.xy__, r369.xy00\n"
            "mov r271, r333\n"
            "mov r272, r334\n"
            "call 37\n"
            "mov r442, r269\n"
            "mov r373, r442\n"
            "mov r372, r373\n"
            "mov r335.x___, l0.x000\n"
            "mov r337.x___, r327.x000\n"
            "mov r338.x___, r329.x000\n"
            "mov r339.x___, r331.x000\n"
            "mov r340, r372\n"
            "mov r341, r325\n"
            "mov r342, r326\n"
            "call 40\n"
            "mov r371.x___, r336.x000\n"
            "mov r374.x___, r371.x000\n"
            "mov r374._y__, l0.0x00\n"
            "mov r374.__z_, l0.00x0\n"
            "mov r374.___w, l0.000x\n"
            "mov r370, r374\n"
            "mov r368, r370\n"
            "ret_dyn\n"
            "ret\n"
            "end\n";
}
#endif // _AMDSPL_SORT_CALCODE_H
