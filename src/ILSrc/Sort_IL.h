#ifndef _AMDSPL_BITONICSORT_CALCODE_H
#define _AMDSPL_BITONICSORT_CALCODE_H

#include "ILPrograms.h"

const char f_szBitonicSort[] = 
"il_ps_2_0\n"
"dcl_literal l0,0x00000000,0x00000000,0x00000000,0x00000000\n"
"dcl_literal l1,0x00000001,0x00000001,0x00000001,0x00000001\n"
"dcl_literal l2,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF\n"
"dcl_literal l3,0x7FFFFFFF,0x7FFFFFFF,0x7FFFFFFF,0x7FFFFFFF\n"
"dcl_literal l4,0x7F800000,0x7F800000,0x7F800000,0x7F800000\n"
"dcl_literal l5,0x80000000,0x80000000,0x80000000,0x80000000\n"
"dcl_literal l6,0x3E9A209B,0x3E9A209B,0x3E9A209B,0x3E9A209B\n"
"dcl_literal l7,0x3F317218,0x3F317218,0x3F317218,0x3F317218\n"
"dcl_literal l8,0x40490FDB,0x40490FDB,0x40490FDB,0x40490FDB\n"
"dcl_literal l9,0x3FC90FDB,0x3FC90FDB,0x3FC90FDB,0x3FC90FDB\n"
"dcl_literal l10,0x00000003,0x00000003,0x00000003,0x00000003\n"
"dcl_literal l11,0x00000002,0x00000002,0x00000002,0x00000002\n"
"dcl_literal l12,0x3F800000,0x3F800000,0x3F800000,0x3F800000\n"
"dcl_literal l13,0x40000000,0x40000000,0x40000000,0x40000000\n"
"dcl_output_usage(generic) o0.xyzw\n"
"dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)\n"
"dcl_input_position_interp(linear_noperspective) v0.xy__\n"
"dcl_literal l14,0x3F000000,0x3F000000,0x3F000000,0x3F000000\n"
"dcl_cb cb0[3]\n"
"mov r364.xy__,v0.xyzw\n"
"mov r269.x___,cb0[l0.x + 0].x000\n"
"mov r270.xyz_,cb0[l0.x + 0].yzw0\n"
"mov r271.x___,cb0[l0.x + 1].x000\n"
"mov r272.xyz_,cb0[l0.x + 1].yzw0\n"
"mov r273.x___,cb0[l0.x + 2].x000\n"
"mov r274.xyz_,cb0[l0.x + 2].yzw0\n"
"call 39 \n"
"call 0 \n"
"endmain\n"
"\n"
"func 0\n"
"mov o0.xyzw,r363.xyzw\n"
"ret\n"
"\n"
"func 2\n"
"ieq r0.x___,r17.x000,l0.x000\n"
"if_logicalnz r0.x000\n"
"sample_resource(0)_sampler(0) r19.xyzw,r18.xy00\n"
"endif\n"
"mov r16.x___,r19.x000\n"
"ret_dyn\n"
"ret\n"
"\n"
"func 37\n"
"itof r372.x___,r280.x000\n"
"mov r287.x___,r372.x000\n"
"mov r286.x___,r287.x000\n"
"mod r288.x___,r286.x000,r279.x000\n"
"lt r289.x___,r288.x000,r278.x000\n"
"mov r290.x___,l12_neg(xyzw).x000\n"
"and r373.x___,r289.x000,l1.x000\n"
"itof r373.x___,r373.x000\n"
"cmov_logical r291.x___,r373.x000,l12.x000,r290.x000\n"
"mov r283.x___,r291.x000\n"
"div_zeroop(infinity) r292.x___,r286.x000,r277.x000\n"
"round_neginf r293.x___,r292.x000\n"
"mod r294.x___,r293.x000,l13.x000\n"
"eq r295.x___,r294.x000,l0.x000\n"
"mov r296.x___,l12_neg(xyzw).x000\n"
"and r374.x___,r295.x000,l1.x000\n"
"itof r374.x___,r374.x000\n"
"cmov_logical r297.x___,r374.x000,l12.x000,r296.x000\n"
"mov r282.x___,r297.x000\n"
"mul_ieee r298.x___,r283.x000,r278.x000\n"
"add r299.x___,r286.x000,r298.x000\n"
"mov r281.x___,r299.x000\n"
"mov r300.x___,r286.x000\n"
"mov r300._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r300.xy00\n"
"call 2 \n"
"mov r375.x___,r16.x000\n"
"mov r301.x___,r281.x000\n"
"mov r301._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r301.xy00\n"
"call 2 \n"
"mov r376.x___,r16.x000\n"
"lt r302.x___,r375.x000,r376.x000\n"
"mov r303.x___,r286.x000\n"
"mov r303._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r303.xy00\n"
"call 2 \n"
"mov r377.x___,r16.x000\n"
"mov r304.x___,r281.x000\n"
"mov r304._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r304.xy00\n"
"call 2 \n"
"mov r378.x___,r16.x000\n"
"and r379.x___,r302.x000,l1.x000\n"
"itof r379.x___,r379.x000\n"
"cmov_logical r305.x___,r379.x000,r377.x000,r378.x000\n"
"mov r285.x___,r305.x000\n"
"mov r306.x___,r286.x000\n"
"mov r306._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r306.xy00\n"
"call 2 \n"
"mov r380.x___,r16.x000\n"
"mov r307.x___,r281.x000\n"
"mov r307._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r307.xy00\n"
"call 2 \n"
"mov r381.x___,r16.x000\n"
"lt r308.x___,r381.x000,r380.x000\n"
"mov r309.x___,r286.x000\n"
"mov r309._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r309.xy00\n"
"call 2 \n"
"mov r382.x___,r16.x000\n"
"mov r310.x___,r281.x000\n"
"mov r310._y__,l0.0x00\n"
"mov r17.x___,r275.x000\n"
"mov r18.xy__,r310.xy00\n"
"call 2 \n"
"mov r383.x___,r16.x000\n"
"and r384.x___,r308.x000,l1.x000\n"
"itof r384.x___,r384.x000\n"
"cmov_logical r311.x___,r384.x000,r382.x000,r383.x000\n"
"mov r284.x___,r311.x000\n"
"eq r312.x___,r283.x000,r282.x000\n"
"and r385.x___,r312.x000,l1.x000\n"
"itof r385.x___,r385.x000\n"
"cmov_logical r313.x___,r385.x000,r285.x000,r284.x000\n"
"mov r276.x___,r313.x000\n"
"ret\n"
"\n"
"func 39\n"
"mov r368.x___,l14.x000\n"
"mov r368._y__,l14.0x00\n"
"sub r369.xy__,r364.xy00,r368.xy00\n"
"mov r386.xyzw,r369.xy00\n"
"mov r367.xyzw,r386.xyzw\n"
"mov r275.x___,l0.x000\n"
"mov r277.x___,r269.x000\n"
"mov r278.x___,r271.x000\n"
"mov r279.x___,r273.x000\n"
"ftoi r387.xyzw,r367.xyzw\n"
"mov r280.xyzw,r387.xyzw\n"
"call 37 \n"
"mov r366.x___,r276.x000\n"
"mov r370.x___,r366.x000\n"
"mov r370._y__,l0.0x00\n"
"mov r370.__z_,l0.00x0\n"
"mov r370.___w,l0.000x\n"
"mov r365.xyzw,r370.xyzw\n"
"mov r363.xyzw,r365.xyzw\n"
"ret_dyn\n"
"ret\n"
"\n"
"end\n"
"";

amdspl::ILProgInfo BitonicSortILInfo(void)
{
    return amdspl::ILProgInfo( "f_szBitonicSort " )
        .image(f_szBitonicSort)
        .constant(2, amdspl::CONST_USER_PARAM)
        .constant(3, amdspl::CONST_USER_PARAM)
        .constant(4, amdspl::CONST_USER_PARAM)
        .output(1, 0)
        .input(0, 0, amdspl::INPUT_GATHER);
}

#endif // _AMDSPL_SORT_CALCODE_H
