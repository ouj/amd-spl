#ifndef _AMDSPL_BITONICSORT_CALCODE_H
#define _AMDSPL_BITONICSORT_CALCODE_H

#include "ILPrograms.h"

const char f_szBitonicSort[] = 
"il_ps_2_0"
"; l0 = (0.000000f 0.000000f 0.000000f 0.000000f)"
"dcl_literal l0, 0x00000000, 0x00000000, 0x00000000, 0x00000000"
"; l1 = (0.000000f 0.000000f 0.000000f 0.000000f)"
"dcl_literal l1, 0x00000001, 0x00000001, 0x00000001, 0x00000001"
"; l2 = (-1.#QNAN0f -1.#QNAN0f -1.#QNAN0f -1.#QNAN0f)"
"dcl_literal l2, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF"
"; l3 = (1.#QNAN0f 1.#QNAN0f 1.#QNAN0f 1.#QNAN0f)"
"dcl_literal l3, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF"
"; l4 = (1.#INF00f 1.#INF00f 1.#INF00f 1.#INF00f)"
"dcl_literal l4, 0x7F800000, 0x7F800000, 0x7F800000, 0x7F800000"
"; l5 = (0.000000f 0.000000f 0.000000f 0.000000f)"
"dcl_literal l5, 0x80000000, 0x80000000, 0x80000000, 0x80000000"
"; l6 = (0.301030f 0.301030f 0.301030f 0.301030f)"
"dcl_literal l6, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B, 0x3E9A209B"
"; l7 = (0.693147f 0.693147f 0.693147f 0.693147f)"
"dcl_literal l7, 0x3F317218, 0x3F317218, 0x3F317218, 0x3F317218"
"; l8 = (3.141593f 3.141593f 3.141593f 3.141593f)"
"dcl_literal l8, 0x40490FDB, 0x40490FDB, 0x40490FDB, 0x40490FDB"
"; l9 = (1.570796f 1.570796f 1.570796f 1.570796f)"
"dcl_literal l9, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB, 0x3FC90FDB"
"; l10 = (0.000000f 0.000000f 0.000000f 0.000000f)"
"dcl_literal l10, 0x00000003, 0x00000003, 0x00000003, 0x00000003"
"; l11 = (0.000000f 0.000000f 0.000000f 0.000000f)"
"dcl_literal l11, 0x00000002, 0x00000002, 0x00000002, 0x00000002"
"; l12 = (1.000000f 1.000000f 1.000000f 1.000000f)"
"dcl_literal l12, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000"
"; l13 = (2.000000f 2.000000f 2.000000f 2.000000f)"
"dcl_literal l13, 0x40000000, 0x40000000, 0x40000000, 0x40000000"
"dcl_output_generic o0"
"dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float)"
"dcl_input_position_interp(linear_noperspective) v0.xy__"
"; l14 = (0.500000f 0.500000f 0.500000f 0.500000f)"
"dcl_literal l14, 0x3F000000, 0x3F000000, 0x3F000000, 0x3F000000"
"dcl_cb cb0[3]"
"mov r315.xy__, v0"
"mov r269.x___, cb0[l0.x+0].x000"
"mov r270.xyz_, cb0[l0.x+0].yzw0"
"mov r271.x___, cb0[l0.x+1].x000"
"mov r272.xyz_, cb0[l0.x+1].yzw0"
"mov r273.x___, cb0[l0.x+2].x000"
"mov r274.xyz_, cb0[l0.x+2].yzw0"
"call 38"
"call 0"
"endmain"
"func 0"
"mov o0, r314"
"ret"
"func 2"
"ieq r0.x___, r17.x000, l0.x000"
"if_logicalnz r0.x000"
"sample_resource(0)_sampler(0) r19, r18.xy00"
"endif"
"mov r16.x___, r19.x000"
"ret_dyn"
"ret"
"func 37"
"itof r323.x___, r280.x000"
"mov r287.x___, r323.x000"
"mov r286.x___, r287.x000"
"mod r288.x___, r286.x000, r279.x000"
"lt r289.x___, r288.x000, r278.x000"
"mov r290.x___, l12.x000_neg(xyzw)"
"and r324.x___, r289.x000, l1.x000"
"itof r324.x___, r324.x000"
"cmov_logical r291.x___, r324.x000, l12.x000, r290.x000"
"mov r283.x___, r291.x000"
"div_zeroop(infinity) r292.x___, r286.x000, r277.x000"
"round_neginf r293.x___, r292.x000"
"mod r294.x___, r293.x000, l13.x000"
"eq r295.x___, r294.x000, l0.x000"
"mov r296.x___, l12.x000_neg(xyzw)"
"and r325.x___, r295.x000, l1.x000"
"itof r325.x___, r325.x000"
"cmov_logical r297.x___, r325.x000, l12.x000, r296.x000"
"mov r282.x___, r297.x000"
"mul_ieee r298.x___, r283.x000, r278.x000"
"add r299.x___, r286.x000, r298.x000"
"mov r281.x___, r299.x000"
"mov r300.x___, r286.x000"
"mov r300._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r300.xy00"
"call 2"
"mov r326.x___, r16.x000"
"mov r301.x___, r281.x000"
"mov r301._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r301.xy00"
"call 2"
"mov r327.x___, r16.x000"
"lt r302.x___, r326.x000, r327.x000"
"mov r303.x___, r286.x000"
"mov r303._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r303.xy00"
"call 2"
"mov r328.x___, r16.x000"
"mov r304.x___, r281.x000"
"mov r304._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r304.xy00"
"call 2"
"mov r329.x___, r16.x000"
"and r330.x___, r302.x000, l1.x000"
"itof r330.x___, r330.x000"
"cmov_logical r305.x___, r330.x000, r328.x000, r329.x000"
"mov r285.x___, r305.x000"
"mov r306.x___, r286.x000"
"mov r306._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r306.xy00"
"call 2"
"mov r331.x___, r16.x000"
"mov r307.x___, r281.x000"
"mov r307._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r307.xy00"
"call 2"
"mov r332.x___, r16.x000"
"lt r308.x___, r332.x000, r331.x000"
"mov r309.x___, r286.x000"
"mov r309._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r309.xy00"
"call 2"
"mov r333.x___, r16.x000"
"mov r310.x___, r281.x000"
"mov r310._y__, l0.0x00"
"mov r17.x___, r275.x000"
"mov r18.xy__, r310.xy00"
"call 2"
"mov r334.x___, r16.x000"
"and r335.x___, r308.x000, l1.x000"
"itof r335.x___, r335.x000"
"cmov_logical r311.x___, r335.x000, r333.x000, r334.x000"
"mov r284.x___, r311.x000"
"eq r312.x___, r283.x000, r282.x000"
"and r336.x___, r312.x000, l1.x000"
"itof r336.x___, r336.x000"
"cmov_logical r313.x___, r336.x000, r285.x000, r284.x000"
"mov r276.x___, r313.x000"
"ret"
"func 38"
"mov r319.x___, l14.x000"
"mov r319._y__, l14.0x00"
"sub r320.xy__, r315.xy00, r319.xy00"
"mov r337, r320.xy00"
"mov r318, r337"
"mov r275.x___, l0.x000"
"mov r277.x___, r269.x000"
"mov r278.x___, r271.x000"
"mov r279.x___, r273.x000"
"ftoi r338, r318"
"mov r280, r338"
"call 37"
"mov r317.x___, r276.x000"
"mov r321.x___, r317.x000"
"mov r321._y__, l0.0x00"
"mov r321.__z_, l0.00x0"
"mov r321.___w, l0.000x"
"mov r316, r321"
"mov r314, r316"
"ret_dyn"
"ret"
"end";

ILProgInfos[BITONIC_SORT_IL] = amdspl::ILProgInfo( "f_szBitonicSort " )
.image(f_szBitonicSort)
.constant(0, amdspl::CONST_USER_PARAM)
.output(3, 0)
.input(1, 0, amdspl::INPUT_GATHER)
.input(2, 0, amdspl::INPUT_GATHER);

#endif // _AMDSPL_SORT_CALCODE_H
